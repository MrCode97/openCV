### CheatSheet - OpenCV ###

---images load/write,.. ---
cv2.imread(example.jpg, 1)   -1    cv2.IMREAD_COLOR
                              0    cv2.IMREAD_GRAYSCALE
                              1    cv2.IMREAD_UNCHANGED

cv2.namedWindow('title of window', cv2.WINDOW_AUTOSIZE)   cv2.WINDOW_AUTOSIZE (default)
                                                          cv2.WINDOW_NORMAL allows to resize

cv2.waitKey(0)                 default (for 32bit)
cv2.waitKey(0) & 0xFF          64bit

cv2.VideoCapture(0)            number of camera (0 -> webcam)

cap.release                    Don't forget to release
out.release                    Don't forget to release

cv2.VideoWriter_fourcc(*'XVID')                           DIVX, XVID, MJPG, X264, WMV1, WMV2



---drawing---
Coordinate system in OpenCV:
0----------10---> [x]
| (1|1)
|         (10|2)
|
|     (7|4)
5
|
[y]

cv2.line(img, (pStartX, pStartY), (pEndX, pEndY), (color), (thickness))
  cv2.line(img, (128, 384), (384, 384), (255, 255, 255), 2)

cv2.rectangle(img, (point top-left), (point bottom-right), (color), thickness)
  cv2.rectangle(img, (136, 350), (376, 370), (0, 0, 255), 1)

cv2.circle(img, (center), radius, (color), thickness)                                           # thickness (-1) -> filled
  cv2.circle(img, (312, 175), 20, (0, 0, 0), -1)

cv2.ellipse(img, (center), (|up-wards|, |side-wards|), rotation*, startAngle, stopAngle, (color), thickness)
1*rotation of ellipse in anti-clockwise direction
2*startAngle and endAngle denotes the starting and ending of ellipse arc measured in clockwise direction from major axis
  cv2.ellipse(img, (256, 246), (60, 30), 0, 0, 180, (0, 0, 0), -1)

points = np.array([[Px1, Py1], [Px2, Py2], [Px3, Py3], ..., ], np.int32)
  cv2.polylines(img, [points], True, (255, 255, 255)) #255.255.255 = white

#font = cv2.FONT_HERSHEY_DUPLEX -> num[0:7] -> font = 0; 1 .., 7
cv2.putText(img, 'text', (center), font, Size, (color), thickness, cv2.LINE_AA)
  cv2.putText(img, 'OpenCV', (128, 124), 5, 2.2, (0, 0, 0), 2, cv2.LINE_AA)


---ROI---
objekt = img[h1:h2, w1:w2]                # h = height | w = width  (1-2 => start - end) ..from the object in the img (that you want to copy/define)
img[hB:hE, wB:wE] = object                # here you give the coordinates which (where) pixels [from img] shall be overwriten with pixels [from object]
  bubble = img[440:1240, 635:1435]          # define bubble
  img[0:800, 0:800] = bubble                # overwrite img at the given coordinates with 'bubble'

an example at:
/basics/splitMerg.py
/basics/doubleBubble.jpg

  0-------------> [width == y]
  |
  |
  |
  |
  |
  [height == x]

So if you are thinking in (x|y) instead of (h|w) because you are used to that x is width and y is height just flip it:
objekt = img[y1:y2, x1:x2]                # y = height | x = width  (1-2 => start - end) ..from the object in the img (that you want to copy/define)
img[yB:yE, xB:xE] = object                # here you give the coordinates which pixels [from img] shall be overwriten with pixels [from object]
                                          # B => beginning, E = ending
